
import React, { useEffect, useState, useRef } from 'react'

import SideBar from '../SideBar'

import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import dayjs from 'dayjs';
import InputLabel from '@mui/material/InputLabel';
import MenuItem from '@mui/material/MenuItem';
import FormControl from '@mui/material/FormControl';
import Select from '@mui/material/Select';

import { getActivMasterConfigartionAction } from '../action/masterConfigarionsAction'
import { getDateByWithoutRangeSalesAction } from '../action/salesAction'

import { DataGrid, GridToolbar } from '@mui/x-data-grid';
import Controls from "../controls/Controls";

import TextField from '@mui/material/TextField';
import Autocomplete from '@mui/material/Autocomplete';

import { Grid, Button } from "@mui/material";
import { CSVLink } from "react-csv";

import jsPDF from "jspdf";
import "jspdf-autotable";
// Date Fns is used to format the dates we receive
// from our API call



const SalesSummary = () => {

    const [fromDate, setFromDate] = useState(dayjs(new Date()));

    const [toDate, setToDate] = useState(dayjs(new Date()));


    const [dateType, setDateType] = useState(dayjs(new Date()));

    const [showDates, setShowDates] = React.useState(false)


    const [salesPerson, setSalesPerson] = React.useState('');
    const [salesPersons, setSalesPersons] = React.useState([]);

    const [sales, setSales] = useState([])

    const handleDateTypeChange = async (event) => {
        setDateType(event.target.value);
        setShowDates(event.target.value == "Custom Range");
    };


    const getSalesPersons = async () => {

        var salesPersons = await getActivMasterConfigartionAction();

        setSalesPersons(salesPersons)


    }

    const generatePDF = () => {
        const doc = new jsPDF('l', 'mm', [297, 210]);

        const tableColumn = ["invoice No", "invoice Date", "customer Name", "sales person", "total"];
        const tableRows = [];


        // const date = Date().split(" ");
        // // we use a date string to generate our filename.
        // const dateStr = date[0] + date[1] + date[2] + date[3] + date[4];
        // const date = Date().split("OutStanding Summary");
        // // we use a date string to generate our filename.
        // const dateStr = date[0] + date[1] + date[2] + date[3] + date[4];
        doc.text(15, 20, 'Sales Summary Report');

        if (dateType == "Last 1 Day") {
            doc.setFontSize(11);
            doc.text(20, 30, 'Report Generated By Last 1 Day');
            if (salesPerson.masterConfigarationId != undefined) {
                doc.text(20, 50, 'Sales Person:');
                doc.text(50, 50, salesPerson.label);
            }
        }
        else if (dateType == "Last 7 Days") {
            doc.setFontSize(11); doc.text(20, 30, 'Report Generated By Last 7 Days');
            if (salesPerson.masterConfigarationId != undefined) {
                doc.text(20, 50, 'Sales Person:');
                doc.text(50, 50, salesPerson.label);
            }
        } else if (dateType == "Last 15 Days") {
            doc.setFontSize(11); doc.text(20, 30, 'Report Generated By Last 15 Days');
            if (salesPerson.masterConfigarationId != undefined) {
                doc.text(20, 50, 'Sales Person:');
                doc.text(50, 50, salesPerson.label);
            }
        } else if (dateType == "Last 1 Month") {
            doc.setFontSize(11);
            doc.text(20, 30, 'Report Generated By Last 1 Month');
            if (salesPerson.masterConfigarationId != undefined) {
                doc.text(20, 50, 'Sales Person:');
                doc.text(50, 50, salesPerson.label);
            }
        } else if (dateType == "Custom Range") {
            doc.setFontSize(11);
            doc.text(20, 30, 'From Date:');
            doc.text(50, 30, dayjs(fromDate).format('YYYY-MM-DD'));

            doc.text(20, 40, 'To Date:');
            doc.text(50, 40, dayjs(toDate).format('YYYY-MM-DD'));
            if (salesPerson.masterConfigarationId != undefined) {
                doc.text(20, 50, 'Sales Person:');
                doc.text(50, 50, salesPerson.label);
            }
        }


        sales.forEach(sale => {
            const ticketData = [
                sale.invoiceNo,
                sale.invoiceDate,
                sale.customerName,
                sale.salesperson,
                sale.total,

            ];
            tableRows.push(ticketData);
        });


        // startY is basically margin-top
        doc.autoTable(tableColumn, tableRows, { startY: 60,   styles: {
            halign: 'right'
        }, });

        // doc.text("ss", 14, 15);
        // we define the name of our PDF file.
        const date = Date().split(" ");

        const dateStr = date[0] + date[1] + date[2] + date[3] + date[4];
        doc.save(`sales summary_${dateStr}.pdf`);
    };
    // const csvLink = useRef()

    //  const getTransactionData = async () => {

    //     csvLink.current.link.click()
    // }


    const getDateByWithoutRangeSales = async () => {

        var date = ""
        if (dateType == "Last 1 Day") {
            date = "invoiceDate > now() - INTERVAL 24 hour"
        }
        else if (dateType == "Last 7 Days") {
            date = "invoiceDate > now() - INTERVAL 7 day"
        } else if (dateType == "Last 15 Days") {
            date = "invoiceDate > now() - INTERVAL 15 day"
        } else if (dateType == "Last 1 Month") {
            date = "invoiceDate > now() - INTERVAL 1 month"
        } else if (dateType == "Custom Range") {
            date = " invoiceDate >=  CONVERT('" + dayjs(fromDate).format('YYYY-MM-DD') + "', DATE) AND invoiceDate <=  CONVERT('" + dayjs(toDate).format('YYYY-MM-DD') + "', DATE)";

        }
        var values = {
            dateType: date,
            masterConfigarationId: salesPerson.masterConfigarationId != undefined ? salesPerson.masterConfigarationId : ''
        }


        var sales = await getDateByWithoutRangeSalesAction(values);
        setSales(sales)

    }

    useEffect(() => {
        getSalesPersons()

    }, []);

    const columns = [

        { field: 'invoiceNo', headerName: 'Invoice No', width: 150, valueGetter: (params) => `${params.row.invoiceNo || ''}` },

        { field: "invoiceDate", headerName: "invoice Date", width: 150, valueGetter: (params) => `${params.row.invoiceDate || ''}` },


        { field: "customer", headerName: "customer", width: 200, valueGetter: (params) => `${params.row.customerName}` },

        { field: "salesPerson", headerName: "Sales Person", width: 200, valueGetter: (params) => `${params.row.salesperson || ''}` },

        { field: "total", headerName: "Good Values", width: 150,align:'right', valueGetter: (params) => `${params.row.total.toFixed(2) || ''}` },


    ];

    const Results = () => (
        <div id="results" className="search-results">
            <LocalizationProvider dateAdapter={AdapterDayjs} >
                <DatePicker
                    label="From Date"
                    value={fromDate}
                    onChange={(newValue) => setFromDate(newValue)}
                    sx={{ m: 1, minWidth: 120, marginLeft: "30px", width: "220px", marginTop: "20px", marginRight: "30px" }} />

            </LocalizationProvider>
            <LocalizationProvider dateAdapter={AdapterDayjs} >
                <DatePicker
                    label="To Date"
                    value={toDate}
                    onChange={(newValue) => setToDate(newValue)}
                    sx={{ m: 1, minWidth: 120, marginLeft: "30px", width: "220px", marginTop: "20px", marginRight: "30px" }} />

            </LocalizationProvider>
        </div>
    )

    return (
        <div>
            <SideBar heading="Sales Summary Report"></SideBar>

            <div style={{ marginLeft: "260px", marginTop: "50px" }}>


                <Grid container>
                    <Grid item>
                        <label style={{ marginLeft: "30px", width: "300px", marginTop: "10px", marginRight: "30px" }}>Date</label>
                        <br />
                        <FormControl required sx={{ m: 1, minWidth: 120, marginLeft: "30px", width: "220px", marginTop: "5px", marginRight: "30px" }}>
                            <InputLabel id="demo-simple-select-required-label"></InputLabel>
                            <Select
                                labelId="demo-simple-select-required-label"
                                id="demo-simple-select-required"
                                value={dateType}
                                label="Select Payment Type"
                                onChange={handleDateTypeChange}
                            // style={{}}
                            >
                                <MenuItem key="1 Day" value="Last 1 Day">Last 1 Day</MenuItem>
                                <MenuItem key="7 Days" value="Last 7 Days">Last 7 Days</MenuItem>
                                <MenuItem key="15 Days" value="Last 15 Days">Last 15 Days</MenuItem>
                                <MenuItem key="1 Month" value="Last 1 Month">Last 1 Month</MenuItem>
                                <MenuItem key="custom Range" value="Custom Range">Custom Range</MenuItem>
                            </Select>

                        </FormControl>
                    </Grid>

                    <Grid item >
                    <label style={{ marginLeft: "30px", width: "300px", marginTop: "10px", marginRight: "30px" }}>Select Sales Person</label>
                        <br />
                        <Autocomplete
                            disablePortal
                            id="combo-box-demo"
                            value={salesPerson}
                            onChange={(event, newValue) => {
                                //console.log(newValue)
                                setSalesPerson(newValue);
                            }}
                            getOptionLabel={(option) => {
                                return option != "" ? option.code + " | " + option.label : "";

                            }}
                            options={salesPersons}
                            sx={{ m: 1, minWidth: 120, marginLeft: "30px", width: "220px", marginTop: "5px", marginRight: "30px" }}
                            renderInput={(params) => <TextField {...params}  />}

                        />
                    </Grid>
                    <Grid item alignItems="stretch" style={{ display: "flex" }}>
                        <Button
                            type="Submit"
                            text="Save"
                            onClick={getDateByWithoutRangeSales}
                            style={{ height: '55px', width: '100px', marginTop: "20px" }}
                            color="primary"
                            variant="contained"
                            margin='40px'
                        >search</Button>
                    </Grid>
                </Grid>



                {showDates ? <Results /> : null}

                <br></br>
                <Button
                    type="Submit"
                    text="Save"
                    onClick={generatePDF}
                    style={{ height: '40px', width: '150px', marginLeft: "25px" }}
                    color="primary"
                    variant="contained"
                    margin='40px'
                >Generate PDF</Button>
                {/* <Controls.But onClick={getTransactionData} text="Excel"></Controls.But> */}

                {/* <Controls.But><CSVLink data={sales}>Download me</CSVLink></Controls.But> */}

                <div style={{ height: '100%', width: '75%', margin: "20px" }}>
                    <DataGrid
                        rows={sales}
                        getRowId={(row) => row.invoiceNo}
                        columns={columns}
                        disableRowSelectionOnClick
                        slots={{
                            toolbar: GridToolbar,
                        }}
                        initialState={{
                            pagination: {
                                paginationModel: { page: 0, pageSize: 10 },
                            },
                        }}
                        pageSizeOptions={[10, 20,50,100]}
                    />
                </div>


            </div>
        </div>
    );


}

export default SalesSummary;
